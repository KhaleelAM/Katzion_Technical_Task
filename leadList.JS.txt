/*
Developer : Khaleel Ahammad Mehattar
Details   : This component contains below items
            
            1. LWC to show all leads with an option to search leads by name and to filter the leads
               displayed by lead source.
            2. Includes a paginator with configurable number of records at the bottom of the component
            3. LWC Button to synchronize the Contacts from Org A (cuurent Org) to Org B(Target Org) using Apex

*/

import {LightningElement, wire} from 'lwc';
//Import apex method 
import getLeads from '@salesforce/apex/LeadController.getLeads';
import handleSyncContacts from '@salesforce/apex/ContactCreatedFromSource.handleSyncContacts';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class DatatableWithPagination extends LightningElement {
    
    // JS Properties 
    pageSizeOptions = [5, 10, 25, 50, 75, 100]; //Page size options
    records = []; //All records available in the data table
    columns = []; //columns information available in the data table
    totalRecords = 0; //Total no.of records
    pageSize; //No.of records to be displayed per page
    totalPages; //Total no.of pages
    pageNumber = 1; //Page number    
    recordsToDisplay = []; //Records to be displayed on the page

    searchKey = '';  //search the leads by name
    leadSource = '';  // lead source to select on UI
    leadSourceOptions = ''; // Display of Lead source options
    dataAvailable; 

    leadSourceOptions = [
        { label: '--None--', value: '--None--' },
        { label: 'Web', value: 'Web' },
        { label: 'Phone Inquiry', value: 'Phone Inquiry' },
        { label: 'Partner Referral', value: 'Partner Referral' },
        { label: 'Purchased List', value: 'Purchased List' },
        { label: 'Other', value: 'Other' },
    ];
    

    get bDisableFirst() {
        return this.pageNumber == 1;
    }

    get bDisableLast() {
        return this.pageNumber == this.totalPages;
    }

    // Method to get the Lead details based on Seach Key and selected Lead source
    @wire(getLeads, { searchKey: '$searchKey', leadSource: '$leadSource' })
    retrieveLead({ error, data }) {
        if (data && data.length > 0) {
            console.log('RESULT--> ' + JSON.stringify(data));
            this.records = data;
            this.dataAvailable = true;
            this.totalRecords = data.length; // update total records count                 
            this.pageSize = this.pageSizeOptions[0]; //set pageSize with default value as first option
            this.paginationHelper(); // call helper menthod to update pagination logic 
        } else if (error) {
            console.error('Error fetching leads', error);
            this.dataAvailable = false;
            this.recordsToDisplay = [];
        }
    }

    // set datatable columns info
            columns = [{
                label: 'Name',
                fieldName: 'Name',
            },
            {
                label: 'Company',
                fieldName: 'Company'
            },
            {
                label: 'Lead Source',
                fieldName: 'LeadSource'
            },
            {
                label: 'Status',
                fieldName: 'Status'
            },
        ];

    handleSearchChange(event) {
        this.searchKey = event.target.value;
    }

    handleLeadSourceChange(event) {
        this.leadSource = event.target.value;
    }

    handleRecordsPerPage(event) {
        this.pageSize = event.target.value;
        this.paginationHelper();
    }

    previousPage() {
        this.pageNumber = this.pageNumber - 1;
        this.paginationHelper();
    }

    nextPage() {
        this.pageNumber = this.pageNumber + 1;
        this.paginationHelper();
    }

    firstPage() {
        this.pageNumber = 1;
        this.paginationHelper();
    }

    lastPage() {
        this.pageNumber = this.totalPages;
        this.paginationHelper();
    }


    // JS function to handle pagination logic 
    paginationHelper() {
        this.recordsToDisplay = [];
        // calculate total pages
        this.totalPages = Math.ceil(this.totalRecords / this.pageSize);
        // set page number 
        if (this.pageNumber <= 1) {
            this.pageNumber = 1;
        } else if (this.pageNumber >= this.totalPages) {
            this.pageNumber = this.totalPages;
        }

        // set records to display on current page 
        for (let i = (this.pageNumber - 1) * this.pageSize; i < this.pageNumber * this.pageSize; i++) {
            if (i === this.totalRecords) {
                break;
            }
            this.recordsToDisplay.push(this.records[i]);
        }
    }

// Method to execute the Contact Sync Logic in Apex
handleSyncContacts() {
        handleSyncContacts()
            .then(result => {
                // Show a success toast message
                const toastEvent = new ShowToastEvent({
                    title: 'Success',
                    message: 'Contact Sync initiated successfully',
                    variant: 'success'
                });
                this.dispatchEvent(toastEvent);
            })
            .catch(error => {
                // Handle errors if needed
                console.error('Error fetching contacts', error);
                // Show an error toast message
                const toastEvent = new ShowToastEvent({
                    title: 'Error',
                    message: 'Error initiating contact sync',
                    variant: 'error'
                });
                this.dispatchEvent(toastEvent);
            });
    }
}